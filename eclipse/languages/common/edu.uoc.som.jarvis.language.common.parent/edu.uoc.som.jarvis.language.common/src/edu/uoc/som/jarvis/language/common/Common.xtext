grammar edu.uoc.som.jarvis.language.common.Common with org.eclipse.xtext.common.Terminals

import "edu.uoc.som.jarvis.common"

Program:
	(instructions += Instruction)*
;

Instruction:
	VariableDeclaration | Expression | ImportDeclaration
;

ImportDeclaration returns ImportDeclaration:
	{PlatformImportDeclaration} 'import platform' path=STRING ('as' alias=ID)?
	| {LibraryImportDeclaration} 'import library' path=STRING ('as' alias=ID)?
;

VariableDeclaration:
	'def' name=ID ('=' value=Expression)?
;

Expression:
	PlusOperation 
	| IfExpression
;

IfExpression returns IfExpression:
	'if' '(' condition=Expression ')' 
	'{' (thenInstructions+=Instruction)+ '}'
	('else' '{' (elseInstructions+=Instruction)+ '}')?
;

PlusOperation returns Expression:
	MinusOperation ({OperationCall.source = current} name='+' args+=Expression)*
;

MinusOperation returns Expression:
	GreaterOperation({OperationCall.source = current} name='-' args+=Expression)*
;

GreaterOperation returns Expression:
	GreaterOrEqualOperation({OperationCall.source = current} name='>' args+=Expression)*
;

GreaterOrEqualOperation returns Expression:
	LesserOperation({OperationCall.source = current} name='>=' args+=Expression)*
;

LesserOperation returns Expression:
	LesserOrEqualOperation({OperationCall.source = current} name='<' args+=Expression)*
;

LesserOrEqualOperation returns Expression:
	NotEqualOperation({OperationCall.source = current} name='<=' args+=Expression)*
;

NotEqualOperation returns Expression:
	EqualOperation({OperationCall.source = current} name='!=' args+=Expression)*
;

EqualOperation returns Expression:
	OrOperation({OperationCall.source = current} name='==' args+=Expression)*
;

OrOperation returns Expression:
	AndOperation({OperationCall.source = current} name='or' args+=Expression)*
;

AndOperation returns Expression:
	OperationCall({OperationCall.source = current} name = 'and' args+=Expression)*
;

OperationCall returns Expression:
	PropertyAccess ({OperationCall.source = current} '.' name=ID '(' (args+=Expression (',' args+=Expression)*)? ')')*
;

PropertyAccess returns Expression:
	(Access | Literal) ({PropertyAccess.source = current}  '.' feature=ID)*
;

Access returns Expression:
	VariableAccess | ContextAccess | SessionAccess
;

VariableAccess:
	referredVariable = [VariableDeclaration|ID]
;

ContextAccess:
	'context' '(' contextName=ID ')'
;

SessionAccess: 
	{SessionAccess}'session'
;


Literal:
	StringLiteral | NumberLiteral | BooleanLiteral
;

StringLiteral:
	value = STRING
;

NumberLiteral:
	value = INT
;

BooleanLiteral:
	{BooleanLiteral} (value?='true' | 'false')
;

