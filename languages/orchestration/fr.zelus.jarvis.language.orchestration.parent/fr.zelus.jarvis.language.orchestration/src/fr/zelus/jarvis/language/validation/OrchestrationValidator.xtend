/*
 * generated by Xtext 2.12.0
 */
package fr.zelus.jarvis.language.validation

import fr.zelus.jarvis.language.util.ModuleRegistry
import fr.zelus.jarvis.module.Parameter
import fr.zelus.jarvis.orchestration.ActionInstance
import fr.zelus.jarvis.orchestration.OrchestrationModel
import fr.zelus.jarvis.orchestration.OrchestrationPackage
import java.io.IOException
import org.eclipse.xtext.validation.Check
import org.eclipse.emf.ecore.resource.Resource
import static java.util.Objects.isNull

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class OrchestrationValidator extends AbstractOrchestrationValidator {
	
	@Check
	def checkOrchestrationModelValidImports(OrchestrationModel model) {
		model.imports.forEach[i | 
			println("Checking import " + i)
			var Resource moduleResource =ModuleRegistry.instance.loadModule(i)
			if(isNull(moduleResource)) {
				error('Module ' + i + "does not exist", OrchestrationPackage.Literals.ORCHESTRATION_MODEL__IMPORTS)
			}
		]
	}
	
	@Check
	def checkValidActionInstance(ActionInstance actionInstance) {
		val actionParameters = actionInstance.action.parameters;
		val actionInstanceParameters = actionInstance.values.map[v | v.parameter]
		for(Parameter p : actionParameters) {
			if(!actionInstanceParameters.contains(p)) {
				println('The parameter ' + p.key + ' is not set in the action instance')
				error('The parameter ' + p.key + ' is not set in the action instance', OrchestrationPackage.Literals.ACTION_INSTANCE__VALUES)
			}
		}
	}
}
